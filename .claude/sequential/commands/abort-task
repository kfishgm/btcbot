#!/bin/bash
# Abort current sequential task and clean up

# Get task ID from argument or current sequential task
TASK_ID=${1:-$(gh issue list --assignee @me --label "sequential-wip" --json number -q '.[0].number' 2>/dev/null)}

if [ -z "$TASK_ID" ]; then
    echo "No active task to abort"
    exit 0
fi

# Colors
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${YELLOW}⚠️  Aborting task #$TASK_ID...${NC}"
echo ""

# Confirm abort
read -p "Are you sure you want to abort this task? (y/N): " confirm
if [ "$confirm" != "y" ] && [ "$confirm" != "Y" ]; then
    echo "Abort cancelled"
    exit 0
fi

echo ""
echo "Cleaning up labels..."

# Remove all labels
gh issue edit $TASK_ID --remove-label "sequential-wip" 2>/dev/null || true
for agent in architect test-writer implementer code-reviewer test-analyzer test-e2e-analyzer; do
    gh issue edit $TASK_ID --remove-label "${agent}-wip" 2>/dev/null || true
    gh issue edit $TASK_ID --remove-label "${agent}-done" 2>/dev/null || true
done

# Get current branch
CURRENT_BRANCH=$(git branch --show-current)
EXPECTED_BRANCH="$(echo "$TASK_ID" | tr '[:upper:]' '[:lower:]')-sequential"

# Check for uncommitted changes
if [ -n "$(git status --porcelain)" ]; then
    echo -e "${YELLOW}Warning: You have uncommitted changes${NC}"
    read -p "Stash changes? (y/N): " stash
    if [ "$stash" = "y" ] || [ "$stash" = "Y" ]; then
        git stash push -m "Aborted task #$TASK_ID"
        echo "Changes stashed"
    fi
fi

# Switch to main and delete branch
if [ "$CURRENT_BRANCH" = "$EXPECTED_BRANCH" ]; then
    echo "Switching to main branch..."
    git checkout main
    git pull origin main
    
    echo "Deleting local branch $EXPECTED_BRANCH..."
    git branch -D "$EXPECTED_BRANCH" 2>/dev/null || true
else
    echo "Not on expected branch, skipping branch deletion"
fi

# Check if remote branch exists and offer to delete
if git show-ref --verify --quiet "refs/remotes/origin/$EXPECTED_BRANCH"; then
    echo ""
    read -p "Delete remote branch origin/$EXPECTED_BRANCH? (y/N): " delete_remote
    if [ "$delete_remote" = "y" ] || [ "$delete_remote" = "Y" ]; then
        git push origin --delete "$EXPECTED_BRANCH"
        echo "Remote branch deleted"
    fi
fi

echo ""
echo -e "${RED}✅ Task #$TASK_ID aborted and cleaned up${NC}"
echo ""
echo "The issue remains open and can be started again with:"
echo "  start-task $TASK_ID"