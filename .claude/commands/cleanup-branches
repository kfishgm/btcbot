#!/bin/bash
# Clean up all branches (local and remote) except main/master
# WARNING: This will delete all unmerged work!

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${RED}WARNING: This will delete ALL branches except main${NC}"
echo -e "${RED}All unmerged work will be lost!${NC}"
echo ""
read -p "Are you sure you want to continue? (yes/no): " confirm

if [ "$confirm" != "yes" ]; then
    echo "Cancelled"
    exit 0
fi

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
PROJECT_NAME=$(basename "$PROJECT_ROOT")
PROJECT_NAME_LOWER=$(echo "$PROJECT_NAME" | tr '[:upper:]' '[:lower:]')
PARENT_DIR="$(dirname "$PROJECT_ROOT")"

echo -e "\n${YELLOW}Starting cleanup...${NC}"

# Function to clean a worktree
clean_worktree() {
    local worktree_path=$1
    local worktree_name=$2
    
    if [ -d "$worktree_path" ]; then
        echo -e "\n${YELLOW}Cleaning $worktree_name worktree...${NC}"
        cd "$worktree_path"
        
        # Get current branch
        current_branch=$(git branch --show-current)
        
        # Switch to main if not already
        if [ "$current_branch" != "main" ]; then
            echo "  Switching from $current_branch to main..."
            git checkout main 2>/dev/null || echo "  Could not switch to main"
        fi
        
        # Delete all local branches except main
        echo "  Deleting local branches..."
        git branch | grep -v -E "^\*|main" | xargs -r git branch -D 2>/dev/null || true
        
        # Clean up any uncommitted changes
        echo "  Cleaning working directory..."
        git clean -fd
        git checkout -- .
        
        # Remove any task files
        echo "  Removing task files..."
        rm -f TASK-*.md
        
        echo -e "  ${GREEN}✓ $worktree_name cleaned${NC}"
    fi
}

# Clean main repository
echo -e "\n${YELLOW}Cleaning main repository...${NC}"
cd "$PROJECT_ROOT"

# Stash any changes in main
if [ -n "$(git status --porcelain)" ]; then
    echo "  Stashing changes in main..."
    git stash push -m "Cleanup stash $(date +%Y%m%d_%H%M%S)"
fi

# Fetch latest
echo "  Fetching latest from origin..."
git fetch origin --prune

# Delete all local branches except main
echo "  Deleting local branches..."
git branch | grep -v -E "^\*|main" | xargs -r git branch -D 2>/dev/null || true

# Delete all remote branches except main
echo -e "\n${YELLOW}Deleting remote branches...${NC}"
echo "  This will delete all remote branches except main"
read -p "  Continue with remote deletion? (yes/no): " remote_confirm

if [ "$remote_confirm" = "yes" ]; then
    # Get all remote branches
    remote_branches=$(git branch -r | grep -v -E "HEAD|main" | sed 's/origin\///')
    
    if [ -n "$remote_branches" ]; then
        echo "$remote_branches" | while read branch; do
            echo "  Deleting origin/$branch..."
            git push origin --delete "$branch" 2>/dev/null || echo "    Already deleted or protected"
        done
    else
        echo "  No remote branches to delete"
    fi
fi

# Clean each worktree
clean_worktree "$PARENT_DIR/${PROJECT_NAME_LOWER}-arch" "Architecture"
clean_worktree "$PARENT_DIR/${PROJECT_NAME_LOWER}-test" "Test"
clean_worktree "$PARENT_DIR/${PROJECT_NAME_LOWER}-impl" "Implementation"
clean_worktree "$PARENT_DIR/${PROJECT_NAME_LOWER}-supervisor" "Supervisor"

# Clean up old pipeline state
echo -e "\n${YELLOW}Cleaning pipeline state...${NC}"
cd "$PROJECT_ROOT"

# Reset pipeline state
if [ -f ".claude/pipeline/state/pipeline-state.json" ]; then
    echo '{"version":"2.0.0","agents":{},"tasks":{},"queues":{}}' > .claude/pipeline/state/pipeline-state.json
    echo "  Pipeline state reset"
fi

# Remove old state backups
rm -f .claude/pipeline/state/backups/*.json 2>/dev/null || true
echo "  Old state backups removed"

# Clear current task
echo "" > .claude/current-task.txt 2>/dev/null || true

echo -e "\n${GREEN}✅ Cleanup complete!${NC}"
echo ""
echo "Summary:"
echo "- All local branches deleted (except main)"
if [ "$remote_confirm" = "yes" ]; then
    echo "- All remote branches deleted (except main)"
fi
echo "- All worktrees cleaned"
echo "- All task files removed"
echo "- Pipeline state reset"
echo ""
echo "You can now start fresh with the GitHub Issues workflow!"
echo ""
echo "Next steps:"
echo "1. Run: ./claude/commands/setup-tmux"
echo "2. Run: ./claude/commands/start-agents"
echo "3. The GitHub monitor will auto-assign tasks from Issues"