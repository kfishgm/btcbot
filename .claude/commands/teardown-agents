#!/bin/bash
# Tear down multi-agent environment: remove worktrees and optionally stop tmux
set -e

# Show help
if [[ "${1:-}" == "--help" || "${1:-}" == "-h" ]]; then
    cat << EOF
Teardown Multi-Agent Workflow

Removes all agent worktrees and cleans up the environment.

Usage: teardown-agents [--help]

What it does:
1. Stops tmux sessions if running
2. Removes all 3 agent worktrees
3. Cleans up git worktree references
4. Preserves main project

Warning:
- This will delete all agent worktrees
- Any uncommitted work will be lost
- Run 'git status' in each worktree first

To recreate:
- Run 'setup-agents' again
EOF
    exit 0
fi

# Dynamic path detection
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
PROJECT_NAME="${PROJECT_NAME:-$(basename $PROJECT_ROOT)}"
PROJECT_NAME_LOWER=$(echo "$PROJECT_NAME" | tr '[:upper:]' '[:lower:]')
PARENT_DIR="$(dirname "$PROJECT_ROOT")"
TMUX_SESSION="${PROJECT_NAME_LOWER}-dev"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${BLUE}🔧 Tearing down multi-agent environment${NC}"
echo "========================================"
echo ""

# Check if there are uncommitted changes in worktrees
check_worktree_changes() {
  local has_changes=false
  
  for worktree in arch test impl; do
    WORKTREE_PATH="$PARENT_DIR/${PROJECT_NAME_LOWER}-$worktree"
    if [ -d "$WORKTREE_PATH" ]; then
      cd "$WORKTREE_PATH"
      # Check for changes excluding CLAUDE.md and TASK files
      if [ -n "$(git status --porcelain | grep -v 'CLAUDE.md' | grep -v 'TASK-.*\.md')" ]; then
        echo -e "${YELLOW}⚠ Uncommitted changes in $worktree worktree${NC}"
        has_changes=true
      fi
    fi
  done
  
  if [ "$has_changes" = true ]; then
    echo ""
    echo -e "${RED}Warning: Uncommitted changes found!${NC}"
    echo "Please commit or stash changes before tearing down."
    echo "Continue anyway? (y/N)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
      exit 1
    fi
  fi
}

# Return to main directory
cd "$PROJECT_ROOT"

echo -e "${CYAN}Step 1: Checking for uncommitted changes...${NC}"
echo ""
check_worktree_changes

echo ""
echo -e "${CYAN}Step 2: Removing git worktrees...${NC}"
echo ""

# Function to remove a worktree
remove_worktree() {
  local worktree_name=$1
  local worktree_path="$PARENT_DIR/${PROJECT_NAME_LOWER}-$worktree_name"
  local agent_icon=$2
  
  if [ -d "$worktree_path" ]; then
    echo -e "${agent_icon} Removing $worktree_name worktree..."
    
    # Remove the worktree
    if git worktree remove "$worktree_path" --force 2>/dev/null; then
      echo -e "  ${GREEN}✓ Removed worktree${NC}"
    else
      # If git worktree remove fails, try manual cleanup
      echo -e "  ${YELLOW}⚠ Git worktree remove failed, cleaning up manually${NC}"
      rm -rf "$worktree_path"
      git worktree prune
      echo -e "  ${GREEN}✓ Manually cleaned up${NC}"
    fi
    
    # Clean up the feature branch if it exists
    local branch="feature/${PROJECT_NAME_LOWER}-$worktree_name"
    if git show-ref --verify --quiet "refs/heads/$branch"; then
      if git branch -d "$branch" 2>/dev/null; then
        echo -e "  ${GREEN}✓ Removed branch: $branch${NC}"
      else
        echo -e "  ${YELLOW}ℹ Branch $branch has unmerged changes${NC}"
      fi
    fi
  else
    echo -e "${agent_icon} ${YELLOW}⚠ $worktree_name worktree not found${NC}"
  fi
}

# Remove all worktrees
remove_worktree "arch" "🏗️"
remove_worktree "test" "🧪"
remove_worktree "impl" "💻"

# Clean up any dangling worktree references
echo ""
echo "Pruning worktree references..."
git worktree prune
echo -e "${GREEN}✓ Worktree cleanup complete${NC}"

# Check for tmux session
echo ""
echo -e "${CYAN}Step 3: Checking tmux session...${NC}"
echo ""

if tmux has-session -t "$TMUX_SESSION" 2>/dev/null; then
  echo -e "${YELLOW}Tmux session '$TMUX_SESSION' is running${NC}"
  echo "Would you like to stop it? (y/N)"
  read -r response
  if [[ "$response" =~ ^[Yy]$ ]]; then
    tmux kill-session -t "$TMUX_SESSION"
    echo -e "${GREEN}✓ Stopped tmux session${NC}"
  else
    echo -e "${BLUE}ℹ Tmux session left running${NC}"
    echo "You can attach to it with: tmux attach -t $TMUX_SESSION"
  fi
else
  echo -e "${GREEN}✓ No tmux session to stop${NC}"
fi

# Clean up any task branches
echo ""
echo -e "${CYAN}Step 4: Cleaning up feature branches...${NC}"
echo ""

# Get list of merged feature branches
MERGED_BRANCHES=$(git branch --merged main | grep -E "feature/.*-(arch|test|impl|complete)$" | tr -d ' *')

# Also get unmerged feature branches for current project
UNMERGED_BRANCHES=$(git branch --no-merged main | grep -E "feature/.*${PROJECT_NAME_LOWER}.*-(arch|test|impl|complete)$" | tr -d ' *')

if [ -n "$MERGED_BRANCHES" ]; then
  echo "Found merged feature branches:"
  echo "$MERGED_BRANCHES" | while read -r branch; do
    echo "  - $branch"
  done
  echo ""
  echo "Delete these merged branches? (y/N)"
  read -r response
  if [[ "$response" =~ ^[Yy]$ ]]; then
    echo "$MERGED_BRANCHES" | while read -r branch; do
      if git branch -d "$branch" 2>/dev/null; then
        echo -e "${GREEN}✓ Deleted: $branch${NC}"
      fi
    done
  fi
else
  echo -e "${GREEN}✓ No merged feature branches to clean up${NC}"
fi

# Handle unmerged branches
if [ -n "$UNMERGED_BRANCHES" ]; then
  echo ""
  echo "Found unmerged feature branches for $PROJECT_NAME:"
  echo "$UNMERGED_BRANCHES" | while read -r branch; do
    echo "  - $branch"
  done
  echo ""
  echo "Force delete these unmerged branches? (y/N)"
  read -r response
  if [[ "$response" =~ ^[Yy]$ ]]; then
    echo "$UNMERGED_BRANCHES" | while read -r branch; do
      if git branch -D "$branch" 2>/dev/null; then
        echo -e "${GREEN}✓ Force deleted: $branch${NC}"
      fi
    done
  else
    echo -e "${YELLOW}ℹ Unmerged branches kept${NC}"
  fi
fi

echo ""
echo -e "${GREEN}═════════════════════════════════════${NC}"
echo -e "${GREEN}✅ Teardown complete!${NC}"
echo -e "${GREEN}═════════════════════════════════════${NC}"
echo ""
echo "The multi-agent environment has been cleaned up."
echo ""
echo "To set up agents again, run:"
echo "  ${CYAN}/setup-agents${NC}"
echo ""
echo "To see available tasks, run:"
echo "  ${CYAN}/list-tasks${NC}"

# Make script executable
chmod +x "$0" 2>/dev/null