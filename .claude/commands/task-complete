#!/bin/bash
# Simplified task completion command for agents
# Usage: .claude/commands/task-complete

# Don't exit on errors - we want to handle them gracefully
set +e

# Get the directory of this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Source utilities with error handling
if [ -f "$PROJECT_ROOT/.claude/lib/issue-utils.sh" ]; then
    source "$PROJECT_ROOT/.claude/lib/issue-utils.sh"
else
    echo -e "${RED}ERROR: Cannot find issue-utils.sh${NC}"
    exit 1
fi

if [ -f "$PROJECT_ROOT/.claude/lib/git-utils.sh" ]; then
    source "$PROJECT_ROOT/.claude/lib/git-utils.sh"
else
    echo -e "${RED}ERROR: Cannot find git-utils.sh${NC}"
    exit 1
fi

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m'

# Detect agent role from worktree path
WORKTREE_NAME=$(basename "$PWD")
if [[ "$WORKTREE_NAME" =~ -arch$ ]]; then
    AGENT_ROLE="architect"
elif [[ "$WORKTREE_NAME" =~ -test$ ]]; then
    AGENT_ROLE="test"
elif [[ "$WORKTREE_NAME" =~ -impl$ ]]; then
    # Implementation agent should use complete-task, not task-complete
    echo -e "${RED}ERROR: Implementation agent must use .claude/commands/complete-task${NC}"
    echo -e "${RED}The task-complete command is only for architect and test agents.${NC}"
    echo ""
    echo -e "${YELLOW}To complete your implementation work:${NC}"
    echo "  .claude/commands/complete-task"
    echo ""
    echo "This will:"
    echo "  - Run quality checks"
    echo "  - Create a PR"
    echo "  - Close the GitHub issue"
    exit 1
else
    echo -e "${RED}ERROR: Cannot determine agent role from worktree path${NC}"
    exit 1
fi

echo -e "${CYAN}=== Task Completion for $AGENT_ROLE ===${NC}"

# Get current task
TASK_ID=$(get_current_task)

if [ -z "$TASK_ID" ]; then
    echo -e "${RED}ERROR: No TASK file found${NC}"
    exit 1
fi

echo "Current task: #$TASK_ID"

# Check if work is already marked complete
if is_agent_work_complete "$TASK_ID" "$AGENT_ROLE"; then
    echo -e "${YELLOW}✓ Your checkbox is already marked for task #$TASK_ID${NC}"
    
    # Get branch name
    BRANCH_NAME=$(echo "$TASK_ID" | tr '[:upper:]' '[:lower:]')-${AGENT_ROLE}
    
    # Check if branch exists
    if branch_exists "$BRANCH_NAME" || branch_exists "origin/$BRANCH_NAME"; then
        echo -e "${GREEN}✓ Branch exists: $BRANCH_NAME${NC}"
        echo ""
        echo "Marking task complete in the system..."
        
        # Mark complete using the agent interface
        "$PROJECT_ROOT/.claude/pipeline/lib/github-agent-interface.sh" complete "$AGENT_ROLE" "$TASK_ID" "$BRANCH_NAME"
        
        echo -e "${GREEN}✓ Task #$TASK_ID marked complete for $AGENT_ROLE${NC}"
        
        # Exit Claude to ensure fresh instance for next task
        echo ""
        echo "Exiting Claude for fresh start on next task..."
        
        # Get tmux session and pane info
        PROJECT_NAME=$(basename "$PROJECT_ROOT")
        SESSION_NAME="$(echo "${PROJECT_NAME}" | tr '[:upper:]' '[:lower:]')-dev"
        
        # Determine pane number based on agent role
        case "$AGENT_ROLE" in
            architect) PANE_NUM=0 ;;
            test) PANE_NUM=1 ;;
            implementation) PANE_NUM=2 ;;
        esac
        
        # Kill Claude process for this worktree
        "$PROJECT_ROOT/.claude/lib/kill-worktree-claude.sh" "$(pwd)" "$AGENT_ROLE"
        
        echo -e "${GREEN}✓ Claude exited. Ready for next task.${NC}"
        exit 0
    else
        echo -e "${RED}ERROR: Checkbox is marked but branch not found: $BRANCH_NAME${NC}"
        echo "Please ensure your work is pushed to the branch."
        exit 1
    fi
fi

# Work is not yet marked complete, proceed with normal completion
echo "Preparing to mark work complete..."

# Get current branch
CURRENT_BRANCH=$(git branch --show-current)
echo "Current branch: $CURRENT_BRANCH"

# Clean up forbidden files first
echo "Cleaning up forbidden files..."
cleanup_forbidden

# Check if there are still uncommitted changes after cleanup
if [ -n "$(git status --porcelain)" ]; then
    echo -e "${YELLOW}Uncommitted changes detected. Auto-committing...${NC}"
    
    # Show what will be committed
    git status --short
    
    # Auto-commit the changes
    safe_add .
    safe_commit "$AGENT_ROLE: complete task #$TASK_ID" || {
        echo -e "${RED}Failed to commit changes${NC}"
        echo "Please manually commit your work and try again:"
        echo "  git add ."
        echo "  git commit -m \"$AGENT_ROLE: complete task #$TASK_ID\""
        exit 1
    }
    
    echo -e "${GREEN}✓ Changes committed${NC}"
fi

# Push branch
echo "Pushing branch to origin..."
git push origin "$CURRENT_BRANCH" || {
    echo -e "${RED}Failed to push branch. Please push manually and try again.${NC}"
    exit 1
}

# Mark complete
echo "Marking work complete in GitHub..."
"$PROJECT_ROOT/.claude/pipeline/lib/github-agent-interface.sh" complete "$AGENT_ROLE" "$TASK_ID" "$CURRENT_BRANCH"

echo -e "${GREEN}✓ Task #$TASK_ID marked complete for $AGENT_ROLE${NC}"

# Exit Claude to ensure fresh instance for next task
echo ""
echo "Exiting Claude for fresh start on next task..."

# Get tmux session and pane info
PROJECT_NAME=$(basename "$PROJECT_ROOT")
SESSION_NAME="$(echo "${PROJECT_NAME}" | tr '[:upper:]' '[:lower:]')-dev"

# Determine pane number based on agent role
case "$AGENT_ROLE" in
    architect) PANE_NUM=0 ;;
    test) PANE_NUM=1 ;;
    implementation) PANE_NUM=2 ;;
esac

# Kill Claude process for this worktree
"$PROJECT_ROOT/.claude/lib/kill-worktree-claude.sh" "$(pwd)" "$AGENT_ROLE"

echo -e "${GREEN}✓ Claude exited. Ready for next task.${NC}"