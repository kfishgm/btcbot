#!/bin/bash
# Token Usage Monitor for Claude
# Displays token usage and time remaining before 5-hour cap

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Configuration
FIVE_HOURS_IN_SECONDS=$((5 * 60 * 60))  # 5 hours = 18000 seconds
MONITOR_INTERVAL=${1:-10}  # Update interval in seconds (default: 10)
STATE_FILE="$HOME/.claude/token-usage-state.json"
LOG_DIR="$HOME/.claude/logs"
LOG_FILE="$LOG_DIR/claude-usage.log"

# Create directories
mkdir -p "$(dirname "$STATE_FILE")"
mkdir -p "$LOG_DIR"

# Initialize state file if it doesn't exist
if [ ! -f "$STATE_FILE" ]; then
    cat > "$STATE_FILE" <<EOF
{
  "current_session": {
    "start_time": null,
    "tokens_used": 0,
    "messages_sent": 0
  },
  "history": []
}
EOF
fi

# Function to get current timestamp
get_timestamp() {
    date +%s
}

# Function to format seconds to human readable
format_duration() {
    local seconds=$1
    local hours=$((seconds / 3600))
    local minutes=$(((seconds % 3600) / 60))
    local secs=$((seconds % 60))
    printf "%02d:%02d:%02d" $hours $minutes $secs
}

# Function to update session
update_session() {
    local current_time=$(get_timestamp)
    
    # Check if we have an active session
    local session_start=$(jq -r '.current_session.start_time // empty' "$STATE_FILE")
    
    if [ -z "$session_start" ] || [ "$session_start" = "null" ]; then
        # Start new session
        jq --arg time "$current_time" '.current_session.start_time = ($time | tonumber)' "$STATE_FILE" > "$STATE_FILE.tmp"
        mv "$STATE_FILE.tmp" "$STATE_FILE"
        session_start=$current_time
    fi
    
    # Check if 5 hours have passed
    local elapsed=$((current_time - session_start))
    if [ $elapsed -gt $FIVE_HOURS_IN_SECONDS ]; then
        # Archive current session and start new one
        jq --arg time "$current_time" '
            .history += [.current_session] |
            .current_session = {
                start_time: ($time | tonumber),
                tokens_used: 0,
                messages_sent: 0
            }
        ' "$STATE_FILE" > "$STATE_FILE.tmp"
        mv "$STATE_FILE.tmp" "$STATE_FILE"
        session_start=$current_time
        elapsed=0
    fi
    
    echo "$elapsed"
}

# Function to estimate tokens from claude processes
estimate_tokens() {
    # Count active Claude processes
    local claude_processes=$(pgrep -f "claude.*--dangerously-skip-permissions" | wc -l)
    
    # Rough estimation based on activity
    # This is a placeholder - in reality, you'd need to parse Claude's actual output
    local estimated_tokens=$((claude_processes * 1000))
    
    # Update state file with estimation
    jq --arg tokens "$estimated_tokens" '.current_session.tokens_used = ($tokens | tonumber)' "$STATE_FILE" > "$STATE_FILE.tmp"
    mv "$STATE_FILE.tmp" "$STATE_FILE"
    
    echo "$estimated_tokens"
}

# Function to display status bar
display_status() {
    local elapsed=$1
    local remaining=$((FIVE_HOURS_IN_SECONDS - elapsed))
    local percent=$((elapsed * 100 / FIVE_HOURS_IN_SECONDS))
    
    # Get token estimation
    local tokens=$(estimate_tokens)
    
    # Clear screen
    clear
    
    # Header
    echo -e "${CYAN}╔═══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║                    Claude Token Usage Monitor                  ║${NC}"
    echo -e "${CYAN}╚═══════════════════════════════════════════════════════════════╝${NC}"
    echo
    
    # Time information
    echo -e "${BLUE}Session Time:${NC}"
    echo -e "  Elapsed:   ${YELLOW}$(format_duration $elapsed)${NC} / $(format_duration $FIVE_HOURS_IN_SECONDS)"
    echo -e "  Remaining: ${GREEN}$(format_duration $remaining)${NC}"
    echo
    
    # Progress bar
    echo -e "${BLUE}Progress:${NC}"
    printf "  ["
    
    # Calculate bar width (50 chars)
    local bar_width=50
    local filled=$((percent * bar_width / 100))
    
    # Color based on percentage
    local bar_color=$GREEN
    if [ $percent -gt 80 ]; then
        bar_color=$RED
    elif [ $percent -gt 60 ]; then
        bar_color=$YELLOW
    fi
    
    # Draw progress bar
    for ((i=0; i<bar_width; i++)); do
        if [ $i -lt $filled ]; then
            printf "${bar_color}█${NC}"
        else
            printf "░"
        fi
    done
    
    printf "] ${bar_color}%3d%%${NC}\n" $percent
    echo
    
    # Token information (placeholder)
    echo -e "${BLUE}Token Usage:${NC}"
    echo -e "  Estimated: ${YELLOW}~$(printf "%'d" $tokens)${NC} tokens"
    echo -e "  Note: Token counting requires Claude API integration"
    echo
    
    # Active agents
    echo -e "${BLUE}Active Claude Instances:${NC}"
    local instances=0
    for agent in architect test implementation; do
        if pgrep -f "claude.*$agent" > /dev/null 2>&1; then
            echo -e "  ${GREEN}●${NC} $agent"
            ((instances++))
        else
            echo -e "  ${RED}○${NC} $agent"
        fi
    done
    
    if [ $instances -eq 0 ]; then
        echo -e "  ${YELLOW}No active Claude instances${NC}"
    fi
    echo
    
    # Warnings
    if [ $percent -gt 90 ]; then
        echo -e "${RED}⚠️  WARNING: Less than 30 minutes remaining!${NC}"
        echo -e "${RED}   Consider wrapping up current tasks.${NC}"
    elif [ $percent -gt 80 ]; then
        echo -e "${YELLOW}⚠️  NOTICE: Less than 1 hour remaining.${NC}"
    fi
    
    # Footer
    echo
    echo -e "${CYAN}Press Ctrl+C to exit${NC}"
    
    # Log to file
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Elapsed: $(format_duration $elapsed), Remaining: $(format_duration $remaining), Progress: $percent%" >> "$LOG_FILE"
}

# Main monitoring loop
monitor_loop() {
    echo -e "${GREEN}Starting Claude Token Usage Monitor...${NC}"
    
    while true; do
        # Update session and get elapsed time
        elapsed=$(update_session)
        
        # Display status
        display_status "$elapsed"
        
        # Check if session is about to expire
        if [ $((FIVE_HOURS_IN_SECONDS - elapsed)) -lt 60 ]; then
            # Less than 1 minute remaining - alert every 10 seconds
            echo -e "\n${RED}🚨 SESSION EXPIRING SOON! 🚨${NC}"
            sleep 10
        else
            sleep "$MONITOR_INTERVAL"
        fi
    done
}

# Handle cleanup
cleanup() {
    echo -e "\n${YELLOW}Token monitor stopped.${NC}"
    exit 0
}

trap cleanup INT TERM

# Main
case "${1:-}" in
    --help|-h)
        echo "Claude Token Usage Monitor"
        echo "Usage: token-monitor [interval]"
        echo
        echo "Arguments:"
        echo "  interval    Update interval in seconds (default: 10)"
        echo
        echo "Features:"
        echo "  - Tracks 5-hour usage window"
        echo "  - Shows time elapsed and remaining"
        echo "  - Visual progress bar with color coding"
        echo "  - Monitors active Claude instances"
        echo "  - Warns when approaching limit"
        ;;
    *)
        monitor_loop
        ;;
esac