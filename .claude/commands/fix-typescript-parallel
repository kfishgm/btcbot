#!/bin/bash
# Advanced parallel TypeScript error fixing with automatic subagent launching
set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Show help
if [[ "${1:-}" == "--help" || "${1:-}" == "-h" ]]; then
    cat << EOF
Advanced Parallel TypeScript Error Fixing

Automatically analyzes TypeScript errors and launches subagents to fix them
in parallel. Each subagent handles specific files based on error complexity.

Usage: fix-typescript-parallel [options]

Options:
  --max-agents N    Maximum parallel agents (default: 5)
  --auto-launch    Automatically launch subagents via Task tool
  --strategy       Show fix strategy without launching agents
  --help          Show this help

Example:
  fix-typescript-parallel --max-agents 3 --auto-launch

Features:
- Intelligent error categorization (any types, missing imports, etc.)
- Load-balanced distribution based on error complexity
- Automatic subagent task creation
- Progress tracking and result collection

EOF
    exit 0
fi

# Configuration
MAX_AGENTS=5
AUTO_LAUNCH=false
STRATEGY_ONLY=false
AGENT_LIMIT=10  # Claude's concurrent subagent limit

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --max-agents)
            MAX_AGENTS="$2"
            shift 2
            ;;
        --auto-launch)
            AUTO_LAUNCH=true
            shift
            ;;
        --strategy)
            STRATEGY_ONLY=true
            shift
            ;;
        *)
            shift
            ;;
    esac
done

# Warn if exceeding agent limit
if [ "$MAX_AGENTS" -gt "$AGENT_LIMIT" ]; then
    echo -e "${YELLOW}⚠️  Warning: Claude supports maximum $AGENT_LIMIT concurrent subagents${NC}"
    echo -e "${YELLOW}   Limiting to $AGENT_LIMIT agents. Run again for remaining errors.${NC}"
    MAX_AGENTS=$AGENT_LIMIT
fi

# Source analyzer utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
source "$PROJECT_ROOT/.claude/lib/typescript-error-analyzer.sh"

echo -e "${YELLOW}=== Advanced Parallel TypeScript Error Fixing ===${NC}"
echo

# Step 1: Run typecheck and capture errors
echo -e "${BLUE}Step 1: Running TypeScript analysis...${NC}"
# Create work directory directly in /tmp/ with timestamp
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
WORK_DIR="/tmp/ts-fix-${TIMESTAMP}-$$"
mkdir -p "$WORK_DIR"
ERROR_FILE="$WORK_DIR/typecheck-output.txt"

echo "Running typecheck (this may take a moment)..."
timeout 300s pnpm typecheck > "$ERROR_FILE" 2>&1 || true

# Step 2: Extract and analyze errors
echo -e "\n${BLUE}Step 2: Analyzing errors by file...${NC}"
echo "Note: Processing project files only (excluding .gitignored patterns)"
echo "      New untracked files ARE included"
ERROR_COUNT=$(extract_errors_by_file "$ERROR_FILE" "$WORK_DIR")

if [ "$ERROR_COUNT" -eq 0 ]; then
    echo -e "${GREEN}✅ No TypeScript errors found in project files!${NC}"
    echo -e "${CYAN}Errors in node_modules and .gitignored files are automatically excluded.${NC}"
    rm -rf "$WORK_DIR"
    exit 0
fi

echo "Found $ERROR_COUNT total errors"

# Step 3: Create parallel batches
echo -e "\n${BLUE}Step 3: Creating work distribution...${NC}"
create_parallel_batches "$WORK_DIR/errors-by-file" "$MAX_AGENTS" "$WORK_DIR/batches"

# Count actual batches created
ACTUAL_AGENTS=$(find "$WORK_DIR/batches" -name "agent-*" -type d | wc -l)
echo "Distributing work among $ACTUAL_AGENTS agents"

# Step 4: Generate fix strategies
echo -e "\n${BLUE}Step 4: Generating fix strategies...${NC}"
for i in $(seq 1 $ACTUAL_AGENTS); do
    AGENT_DIR="$WORK_DIR/batches/agent-$i"
    [ -d "$AGENT_DIR" ] || continue
    
    # Create strategy file for this agent
    STRATEGY_FILE="$AGENT_DIR/strategy.json"
    echo '{"agent": '$i', "files": [' > "$STRATEGY_FILE"
    
    FIRST=true
    for error_file in "$AGENT_DIR"/*.errors; do
        [ -f "$error_file" ] || continue
        
        # Extract original source file path
        BASE_NAME=$(basename "$error_file" .errors)
        SOURCE_FILE=$(find . -name "$BASE_NAME" -type f | head -1)
        
        if [ -n "$SOURCE_FILE" ]; then
            [ "$FIRST" = true ] && FIRST=false || echo "," >> "$STRATEGY_FILE"
            generate_fix_strategy "$error_file" "$SOURCE_FILE" >> "$STRATEGY_FILE"
        fi
    done
    
    echo ']}' >> "$STRATEGY_FILE"
    
    # Count files and errors for this agent
    FILE_COUNT=$(find "$AGENT_DIR" -name "*.errors" | wc -l)
    TOTAL_ERRORS=$(cat "$AGENT_DIR"/*.errors 2>/dev/null | wc -l)
    echo -e "${GREEN}✓ Agent $i: $FILE_COUNT files, $TOTAL_ERRORS errors${NC}"
done

# Step 5: Show strategy or launch agents
if [ "$STRATEGY_ONLY" = true ]; then
    echo -e "\n${YELLOW}=== Fix Strategy ===${NC}"
    for i in $(seq 1 $ACTUAL_AGENTS); do
        echo -e "\n${CYAN}Agent $i Strategy:${NC}"
        jq -r '.files[] | "  - \(.file): \(.error_summary.total_errors) errors (\(.error_summary.any_types) any types)"' \
            "$WORK_DIR/batches/agent-$i/strategy.json" 2>/dev/null || true
    done
    echo -e "\n${BLUE}Work directory: $WORK_DIR${NC}"
    exit 0
fi

# Step 6: Create task prompts for subagents
echo -e "\n${BLUE}Step 5: Creating subagent tasks...${NC}"

# First ensure all agent directories exist
for i in $(seq 1 $ACTUAL_AGENTS); do
    mkdir -p "$WORK_DIR/batches/agent-$i"
done

for i in $(seq 1 $ACTUAL_AGENTS); do
    AGENT_DIR="$WORK_DIR/batches/agent-$i"
    TASK_FILE="$AGENT_DIR/task.md"
    
    # Get file list for this agent from error files
    FILES_LIST=""
    for error_file in "$AGENT_DIR"/*.errors; do
        [ -f "$error_file" ] || continue
        
        # Extract the actual file path from the first line of the error file
        # Format: path/to/file.ts(line,col): error TS####: message
        FIRST_ERROR=$(head -1 "$error_file" 2>/dev/null)
        if [ -n "$FIRST_ERROR" ]; then
            # Extract path before the parenthesis
            SOURCE_FILE=$(echo "$FIRST_ERROR" | sed 's/^\([^(]*\)(.*/\1/')
            if [ -n "$SOURCE_FILE" ]; then
                if [ -z "$FILES_LIST" ]; then
                    FILES_LIST="$SOURCE_FILE"
                else
                    FILES_LIST="$FILES_LIST
$SOURCE_FILE"
                fi
            fi
        fi
    done
    
    # Remove trailing newline and count files
    FILES_LIST=$(printf "%s" "$FILES_LIST" | sed '/^$/d')
    FILES_COUNT=$(echo "$FILES_LIST" | grep -c . || echo 0)
    
    if [ "$FILES_COUNT" -eq 0 ]; then
        # Create a "no work" task file for agents with no assignments
        cat > "$TASK_FILE" << EOF
# TypeScript Error Fix Task - Agent $i of $ACTUAL_AGENTS

**IMPORTANT: You are Agent $i. No files were assigned to you.**

## Status
All TypeScript errors have been distributed to other agents (1-$((i-1))).
You have no files to fix.

## Instructions
1. You can mark this task as complete immediately
2. No action required

## Note
This happens when there are fewer files with errors than agents available.
The workload has been distributed among agents 1-$((i-1)).
EOF
        echo -e "${YELLOW}✓ Created 'no work' task for agent $i${NC}"
        continue
    fi
    
    cat > "$TASK_FILE" << EOF
# TypeScript Error Fix Task - Agent $i of $ACTUAL_AGENTS

**IMPORTANT: You are Agent $i. ONLY fix the $FILES_COUNT files listed below. Other agents are handling other files.**

## Your Assigned Files (ONLY THESE):
$(printf "%s\n" "$FILES_LIST" | while IFS= read -r file; do [ -n "$file" ] && echo "- $file"; done)

## DO NOT WORK ON:
- Any files not listed above
- Files being handled by other agents (Agents 1-$ACTUAL_AGENTS)

## Instructions:
1. ONLY work on your assigned files above
2. For EACH of your files:
   - Read the file and identify all TypeScript errors
   - Fix errors in this order:
     a. Import errors first
     b. Type definition errors
     c. Replace all 'any' types with proper types
     d. Fix missing properties
   - Run \`pnpm typecheck $file\` after fixing to verify
3. Do NOT use @ts-ignore or @ts-expect-error
4. Import types from existing definitions when possible
5. Create new type definitions if needed

## Your Files' Error Summary:
$(jq -r '.files[] | "- \(.file): \(.error_summary.total_errors) errors (\(.error_summary.any_types) any types)"' "$AGENT_DIR/strategy.json" 2>/dev/null || echo "See error files")

## Verification:
After completing ALL your files, run:
\`\`\`bash
$(printf "%s\n" "$FILES_LIST" | while IFS= read -r file; do [ -n "$file" ] && echo "pnpm typecheck $file"; done)
\`\`\`

All should show 0 errors.

## Remember:
- You are Agent $i of $ACTUAL_AGENTS
- ONLY fix the $FILES_COUNT files listed above
- Other agents are working on different files in parallel
EOF
    
    echo -e "${GREEN}✓ Created task for agent $i: $TASK_FILE${NC}"
    echo "  Contains $FILES_COUNT files"
done

# Show task file locations clearly
echo
echo -e "${BLUE}Task files created:${NC}"
for i in $(seq 1 $ACTUAL_AGENTS); do
    TASK_FILE="$WORK_DIR/batches/agent-$i/task.md"
    if [ -f "$TASK_FILE" ]; then
        echo "  Agent $i: $TASK_FILE"
    fi
done

# Step 7: Launch subagents or show instructions
if [ "$AUTO_LAUNCH" = true ]; then
    echo -e "\n${BLUE}Step 6: Launching subagents...${NC}"
    echo -e "${YELLOW}This feature will use the Task tool to launch subagents${NC}"
    
    # Here we would call the Task tool via the API
    # For now, we'll generate the command
    for i in $(seq 1 $ACTUAL_AGENTS); do
        echo
        echo "Launching agent $i..."
        TASK_CONTENT=$(cat "$WORK_DIR/batches/agent-$i/task.md")
        echo "Task tool would be called with:"
        echo "  description: 'Fix TypeScript errors - Batch $i'"
        echo "  subagent_type: 'general-purpose'"
        echo "  prompt: <contents of task.md>"
    done
else
    echo -e "\n${YELLOW}=== Manual Launch Instructions ===${NC}"
    echo "To launch subagents manually, use the Task tool with:"
    echo
    for i in $(seq 1 $ACTUAL_AGENTS); do
        TASK_FILE="$WORK_DIR/batches/agent-$i/task.md"
        if [ -f "$TASK_FILE" ]; then
            echo "Agent $i:"
            echo "  Step 1: Read task file with: cat $TASK_FILE"
            echo "  Step 2: Copy the ENTIRE output from cat command"
            echo "  Step 3: Launch agent with Task tool:"
            echo "    - description: 'Fix TypeScript errors - Batch $i'"
            echo "    - subagent_type: 'general-purpose'"
            echo "    - prompt: [PASTE THE ENTIRE CONTENT FROM STEP 1]"
            echo
        else
            echo -e "${RED}Warning: Task file missing for agent $i${NC}"
        fi
    done
    
    echo -e "${YELLOW}CRITICAL INSTRUCTIONS:${NC}"
    echo "1. YOU must run the 'cat' command for each task file"
    echo "2. YOU must copy the entire content that 'cat' displays"
    echo "3. YOU must paste that content as the 'prompt' parameter"
    echo "4. Do NOT tell agents to read files - they cannot access your /tmp/"
    echo "5. Agents only receive what you put in the 'prompt' parameter"
fi

# Step 8: Save work directory location
echo -e "\n${BLUE}Work directory saved to: $WORK_DIR${NC}"
echo "Contents:"
echo "  - typecheck-output.txt: Full error output"
echo "  - errors-by-file/: Errors grouped by file"
echo "  - batches/agent-N/: Work for each agent"

# Create a results collection script
cat > "$WORK_DIR/collect-results.sh" << 'EOF'
#!/bin/bash
# Collect results after all agents complete

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${YELLOW}=== Collecting Results from Parallel TypeScript Fixes ===${NC}"
echo

# Re-run typecheck to see remaining errors
echo "Running final typecheck to count remaining errors..."
REMAINING_ERRORS=$(timeout 300s pnpm typecheck 2>&1 | grep -c "error TS" || echo 0)

echo
echo -e "${GREEN}Results:${NC}"
echo "- Original errors: [Check original output]"
echo "- Remaining errors: $REMAINING_ERRORS"
echo

if [ "$REMAINING_ERRORS" -eq 0 ]; then
    echo -e "${GREEN}✅ All TypeScript errors fixed!${NC}"
    echo
    echo "Next steps:"
    echo "1. Run 'pnpm lint' to check for linting issues"
    echo "2. Run 'pnpm build:clean' to ensure everything builds"
    echo "3. Commit the changes"
else
    echo -e "${YELLOW}⚠️  $REMAINING_ERRORS errors remain${NC}"
    echo
    echo "Next steps:"
    if [ "$REMAINING_ERRORS" -gt 100 ]; then
        echo "1. Run fix-typescript-parallel again to handle remaining errors"
        echo "   ./.claude/commands/fix-typescript-parallel --max-agents 10"
    else
        echo "1. Fix remaining errors manually or with a single agent"
        echo "   pnpm typecheck 2>&1 | head -50"
    fi
    echo "2. Once all errors are fixed, run quality checks"
fi

# Show which files still have errors
if [ "$REMAINING_ERRORS" -gt 0 ]; then
    echo
    echo -e "${YELLOW}Files still containing errors:${NC}"
    pnpm typecheck 2>&1 | grep -E "^[^:]+\.(ts|tsx):" | cut -d: -f1 | sort -u | head -20
    
    if [ "$REMAINING_ERRORS" -gt 20 ]; then
        echo "... and more"
    fi
fi
EOF

chmod +x "$WORK_DIR/collect-results.sh"

echo
echo -e "${GREEN}✅ Setup complete!${NC}"
echo
echo "Summary:"
echo "- Total errors found: $ERROR_COUNT"
echo "- Agents to launch: $ACTUAL_AGENTS (max 10 concurrent)"
echo "- Errors per agent: ~$(( ERROR_COUNT / ACTUAL_AGENTS ))"
echo
echo "Next steps:"
echo "1. Review work distribution in: $WORK_DIR"
echo "2. Launch $ACTUAL_AGENTS subagents using the Task tool (all at once)"
echo "3. Wait for ALL agents to complete their work"
echo "4. Run: $WORK_DIR/collect-results.sh"
echo
echo "The collect-results script will:"
echo "- Count remaining errors"
echo "- Show which files still need fixes"
echo "- Tell you whether to run again or proceed to next steps"

if [ "$ERROR_COUNT" -gt 500 ] && [ "$ACTUAL_AGENTS" -eq 10 ]; then
    echo
    echo -e "${YELLOW}Note: With $ERROR_COUNT errors and 10-agent limit, you'll likely need${NC}"
    echo -e "${YELLOW}      to run this command 2-3 times to fix all errors.${NC}"
fi