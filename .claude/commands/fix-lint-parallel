#!/bin/bash
# Advanced parallel ESLint error fixing with automatic subagent launching
set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Show help
if [[ "${1:-}" == "--help" || "${1:-}" == "-h" ]]; then
    cat << EOF
Advanced Parallel ESLint Error Fixing

Automatically analyzes ESLint errors and launches subagents to fix them
in parallel. Each subagent handles specific files based on error complexity.

Usage: fix-lint-parallel [options]

Options:
  --max-agents N    Maximum parallel agents (default: 5)
  --auto-fix       Run eslint --fix first for auto-fixable issues
  --strategy       Show fix strategy without launching agents
  --help          Show this help

Example:
  fix-lint-parallel --max-agents 3 --auto-fix

Features:
- Automatic eslint --fix for formatting issues
- Intelligent error categorization
- Load-balanced distribution based on error complexity
- Automatic subagent task creation
- Progress tracking and result collection

EOF
    exit 0
fi

# Configuration
MAX_AGENTS=5
AUTO_FIX=false
STRATEGY_ONLY=false

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --max-agents)
            MAX_AGENTS="$2"
            shift 2
            ;;
        --auto-fix)
            AUTO_FIX=true
            shift
            ;;
        --strategy)
            STRATEGY_ONLY=true
            shift
            ;;
        *)
            shift
            ;;
    esac
done

# Note about Claude's concurrent agent handling
if [ "$MAX_AGENTS" -gt 10 ]; then
    echo -e "${YELLOW}Note: Claude will process agents in batches of 10${NC}"
    echo -e "${YELLOW}      Total agents requested: $MAX_AGENTS${NC}"
fi

# Source analyzer utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
source "$PROJECT_ROOT/.claude/lib/lint-error-analyzer.sh"

echo -e "${YELLOW}=== Advanced Parallel ESLint Error Fixing ===${NC}"
echo

# Step 0: Auto-fix if requested
if [ "$AUTO_FIX" = true ]; then
    echo -e "${BLUE}Step 0: Running ESLint auto-fix...${NC}"
    echo "This will fix formatting issues automatically..."
    timeout 120s pnpm lint --fix || true
    echo -e "${GREEN}✓ Auto-fix complete${NC}"
    echo
fi

# Step 1: Run lint and capture errors
echo -e "${BLUE}Step 1: Running ESLint analysis...${NC}"
# Create work directory directly in /tmp/ with timestamp
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
WORK_DIR="/tmp/lint-fix-${TIMESTAMP}-$$"
mkdir -p "$WORK_DIR"
ERROR_FILE="$WORK_DIR/lint-output.txt"

echo "Running lint check with JSON output..."
# Run ESLint on all directories including tests
# Using explicit directories to include __tests__ which next lint misses
timeout 300s npx eslint . --ext .js,.jsx,.ts,.tsx --ignore-pattern node_modules --ignore-pattern .next --format json 2>&1 | grep -v "^npm warn" > "$ERROR_FILE" || true

# Step 2: Extract and analyze errors
echo -e "\n${BLUE}Step 2: Analyzing errors by file...${NC}"
ERROR_COUNT=$(extract_lint_errors_by_file "$ERROR_FILE" "$WORK_DIR/errors-by-file")

if [ "$ERROR_COUNT" -eq 0 ]; then
    echo -e "${GREEN}✅ No ESLint errors found!${NC}"
    rm -rf "$WORK_DIR"
    exit 0
fi

echo "Found $ERROR_COUNT total lint issues (errors + warnings)"

# Count actual files with errors
FILE_COUNT=$(find "$WORK_DIR/errors-by-file" -name "*.lint" | wc -l)
echo "Across $FILE_COUNT files"

# Adjust MAX_AGENTS if we have fewer files than agents
if [ "$FILE_COUNT" -lt "$MAX_AGENTS" ]; then
    MAX_AGENTS=$FILE_COUNT
    echo -e "${YELLOW}Adjusting to $MAX_AGENTS agents (one per file)${NC}"
fi

# Step 3: Create parallel batches
echo -e "\n${BLUE}Step 3: Creating work distribution...${NC}"
create_lint_parallel_batches "$WORK_DIR/errors-by-file" "$MAX_AGENTS" "$WORK_DIR/batches"

# Count actual batches created
ACTUAL_AGENTS=$(find "$WORK_DIR/batches" -name "agent-*" -type d | wc -l)
echo "Distributing work among $ACTUAL_AGENTS agents"

# Step 4: Generate fix strategies
echo -e "\n${BLUE}Step 4: Generating fix strategies...${NC}"
for i in $(seq 1 $ACTUAL_AGENTS); do
    AGENT_DIR="$WORK_DIR/batches/agent-$i"
    [ -d "$AGENT_DIR" ] || continue
    
    # Create strategy file for this agent
    STRATEGY_FILE="$AGENT_DIR/strategy.json"
    echo '{"agent": '$i', "files": [' > "$STRATEGY_FILE"
    
    FIRST=true
    for error_file in "$AGENT_DIR"/*.lint; do
        [ -f "$error_file" ] || continue
        
        # First line of error file contains the source file path
        SOURCE_FILE=$(head -1 "$error_file" 2>/dev/null)
        
        if [ -n "$SOURCE_FILE" ] && [ -f "$SOURCE_FILE" ]; then
            [ "$FIRST" = true ] && FIRST=false || echo "," >> "$STRATEGY_FILE"
            generate_lint_fix_strategy "$error_file" "$SOURCE_FILE" >> "$STRATEGY_FILE"
        fi
    done
    
    echo ']}' >> "$STRATEGY_FILE"
    
    # Count files and errors for this agent
    FILE_COUNT=$(find "$AGENT_DIR" -name "*.lint" | wc -l)
    TOTAL_ERRORS=$(cat "$AGENT_DIR"/*.lint 2>/dev/null | wc -l)
    echo -e "${GREEN}✓ Agent $i: $FILE_COUNT files, $TOTAL_ERRORS issues${NC}"
done

# Step 5: Show strategy or launch agents
if [ "$STRATEGY_ONLY" = true ]; then
    echo -e "\n${YELLOW}=== Fix Strategy ===${NC}"
    for i in $(seq 1 $ACTUAL_AGENTS); do
        echo -e "\n${CYAN}Agent $i Strategy:${NC}"
        jq -r '.files[] | "  - \(.file): \(.error_summary.total_errors) issues (\(.error_summary.unused_vars) unused vars, \(.error_summary.formatting_errors) formatting)"' \
            "$WORK_DIR/batches/agent-$i/strategy.json" 2>/dev/null || true
    done
    echo -e "\n${BLUE}Work directory: $WORK_DIR${NC}"
    exit 0
fi

# Step 6: Create task prompts for subagents
echo -e "\n${BLUE}Step 5: Creating subagent tasks...${NC}"

for i in $(seq 1 $ACTUAL_AGENTS); do
    AGENT_DIR="$WORK_DIR/batches/agent-$i"
    TASK_FILE="$AGENT_DIR/task.md"
    
    # Get file list for this agent
    FILES_LIST=""
    for error_file in "$AGENT_DIR"/*.lint; do
        [ -f "$error_file" ] || continue
        
        # First line of error file contains the source file path
        SOURCE_FILE=$(head -1 "$error_file" 2>/dev/null)
        if [ -n "$SOURCE_FILE" ]; then
            if [ -z "$FILES_LIST" ]; then
                FILES_LIST="$SOURCE_FILE"
            else
                FILES_LIST="$FILES_LIST\n$SOURCE_FILE"
            fi
        fi
    done
    
    # Remove duplicates and count
    FILES_LIST=$(echo -e "$FILES_LIST" | sort -u | sed '/^$/d')
    FILES_COUNT=$(echo "$FILES_LIST" | grep -c . || echo 0)
    
    if [ "$FILES_COUNT" -eq 0 ]; then
        cat > "$TASK_FILE" << EOF
# ESLint Error Fix Task - Agent $i of $ACTUAL_AGENTS

**IMPORTANT: You are Agent $i. No files were assigned to you.**

## Status
All ESLint errors have been distributed to other agents.
You have no files to fix.

## Instructions
1. Mark this task as complete immediately
2. No action required
EOF
        echo -e "${YELLOW}✓ Created 'no work' task for agent $i${NC}"
        continue
    fi
    
    # Get error details for this agent
    ERROR_DETAILS=""
    for error_file in "$AGENT_DIR"/*.lint; do
        [ -f "$error_file" ] || continue
        if [ -n "$ERROR_DETAILS" ]; then
            ERROR_DETAILS="$ERROR_DETAILS
$(cat "$error_file")"
        else
            ERROR_DETAILS="$(cat "$error_file")"
        fi
    done
    
    cat > "$TASK_FILE" << EOF
# ESLint Error Fix Task - Agent $i of $ACTUAL_AGENTS

**IMPORTANT: You are Agent $i. ONLY fix the $FILES_COUNT files listed below. Other agents are handling other files.**

## Your Assigned Files (ONLY THESE):
$(echo "$FILES_LIST" | while IFS= read -r file; do [ -n "$file" ] && echo "- $file"; done)

## DO NOT WORK ON:
- Any files not listed above
- Files being handled by other agents (Agents 1-$ACTUAL_AGENTS)

## Your ESLint Errors and Warnings to Fix:
\`\`\`
$(printf "%s" "$ERROR_DETAILS")
\`\`\`

## Instructions:
1. ONLY work on your assigned files above
2. **CRITICAL: Fix ONE FILE AT A TIME** - Complete each file fully before moving to the next:
   - Read the file and review the ESLint errors and warnings
   - Fix both errors AND warnings in this order:
     a. Import/undefined errors first (missing imports)
     b. Unused variables (remove or use them)
     c. React hooks dependencies
     d. TypeScript ESLint rules
     e. Formatting warnings (indent, quotes, etc.)
     f. Other errors and warnings
   - Run \`pnpm lint [file]\` after fixing to verify
   - **IMPORTANT: Run tests for the file to ensure nothing broke**:
     - Find related test files: \`find __tests__ -name "*\$(basename [file] .ts)*.test.*"\`
     - Run those tests: \`pnpm test [test-file]\`
     - If tests fail, fix your changes before proceeding
3. **NEVER use workarounds to suppress errors**:
   - Do NOT use eslint-disable comments
   - Do NOT use eslint-disable-next-line
   - Do NOT use /* eslint-disable */
   - Do NOT modify .eslintrc or eslint.config files
   - Do NOT add to .eslintignore
4. Fix the root cause, not just suppress the warning
5. Ensure code remains functional after fixes - TESTS MUST PASS

## Common Fixes:
- **no-unused-vars**: Remove the variable or use it appropriately
- **react-hooks/exhaustive-deps**: Add missing dependencies to useEffect/useMemo/useCallback
- **no-undef**: Add proper imports for undefined variables
- **import/no-unresolved**: Fix import paths or install missing packages
- **@typescript-eslint rules**: Add proper types, don't use 'any'

## Your Files' Error Summary:
$(jq -r '.files[] | "- \(.file): \(.error_summary.total_errors) issues"' "$AGENT_DIR/strategy.json" 2>/dev/null || echo "See error details above")

## File-by-File Workflow:
For EACH file in your list:
1. Read the file
2. Fix all ESLint issues
3. Run: \`pnpm lint [file]\` - Must show 0 errors/warnings
4. Find tests: \`find __tests__ -name "*\$(basename [file] .ts)*.test.*"\`
5. Run tests: \`pnpm test [test-file]\` - Must pass
6. Only then move to the next file

## Verification:
After completing ALL your files, run:
\`\`\`bash
$(printf "%s\n" "$FILES_LIST" | while IFS= read -r file; do [ -n "$file" ] && echo "pnpm lint $file"; done)
\`\`\`

All should show 0 errors/warnings.

## Code Quality Rules:
**CRITICAL**: Review quality rules BEFORE fixing any ESLint errors:
- Read \`.claude/docs/quality-rules.md\` for comprehensive rules
- Key ESLint rules to follow:
  - **@typescript-eslint/no-explicit-any**: NEVER use \`any\` - find proper types
  - **@typescript-eslint/no-unused-vars**: Remove or prefix with \`_\`
  - **@typescript-eslint/ban-ts-comment**: No @ts-nocheck or @ts-ignore
  - **@typescript-eslint/no-require-imports**: Use ES6 imports only

## Remember:
- You are Agent $i of $ACTUAL_AGENTS
- ONLY fix the $FILES_COUNT files listed above
- Other agents are working on different files in parallel
- Fix root causes, not symptoms
- NEVER use eslint-disable comments or modify ESLint config
- ALWAYS run tests after fixing each file
- Follow TypeScript strict mode (handle null/undefined, initialize properties)
EOF
    
    echo -e "${GREEN}✓ Created task for agent $i: $TASK_FILE${NC}"
    echo "  Contains $FILES_COUNT files"
done

# Show task file locations
echo
echo -e "${BLUE}Task files created:${NC}"
for i in $(seq 1 $ACTUAL_AGENTS); do
    TASK_FILE="$WORK_DIR/batches/agent-$i/task.md"
    if [ -f "$TASK_FILE" ]; then
        echo "  Agent $i: $TASK_FILE"
    fi
done

# Create results collection script
cat > "$WORK_DIR/collect-results.sh" << 'EOF'
#!/bin/bash
# Collect results after all agents complete

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${YELLOW}=== Collecting Results from Parallel ESLint Fixes ===${NC}"
echo

# Re-run lint to see remaining errors
echo "Running final lint check to count remaining issues..."
REMAINING=$(timeout 300s pnpm lint 2>&1 | grep -E "error|warning" | wc -l || echo 0)

echo
echo -e "${GREEN}Results:${NC}"
echo "- Remaining issues: $REMAINING"
echo

if [ "$REMAINING" -eq 0 ]; then
    echo -e "${GREEN}✅ All ESLint errors fixed!${NC}"
    echo
    echo "Next steps:"
    echo "1. Run 'pnpm typecheck' to check for TypeScript issues"
    echo "2. Run 'pnpm test' to ensure tests pass"
    echo "3. Run 'pnpm build:clean' to ensure everything builds"
    echo "4. Commit the changes"
else
    echo -e "${YELLOW}⚠️  $REMAINING issues remain${NC}"
    echo
    echo "Next steps:"
    if [ "$REMAINING" -gt 50 ]; then
        echo "1. Run fix-lint-parallel again to handle remaining errors"
        echo "   ./.claude/commands/fix-lint-parallel --max-agents 10"
    else
        echo "1. Fix remaining errors manually or with a single agent"
        echo "   pnpm lint 2>&1 | head -50"
    fi
fi

# Show which files still have errors
if [ "$REMAINING" -gt 0 ]; then
    echo
    echo -e "${YELLOW}Files still containing issues:${NC}"
    pnpm lint 2>&1 | grep -E "^/[^:]+\.(ts|tsx|js|jsx)$" | sort -u | head -20
    
    if [ "$REMAINING" -gt 20 ]; then
        echo "... and more"
    fi
fi
EOF

chmod +x "$WORK_DIR/collect-results.sh"

echo
echo -e "${GREEN}✅ Setup complete!${NC}"
echo
echo "Summary:"
echo "- Total issues found: $ERROR_COUNT"
echo "- Files with issues: $FILE_COUNT"
echo "- Agents to launch: $ACTUAL_AGENTS"
if [ "$ACTUAL_AGENTS" -gt 10 ]; then
    echo "- Claude will process in batches of 10"
fi
echo "- Issues per agent: ~$(( ERROR_COUNT / ACTUAL_AGENTS ))"
echo
echo "Next steps:"
echo "1. Review work distribution in: $WORK_DIR"
echo "2. Launch $ACTUAL_AGENTS subagents using the Task tool"
echo "3. Wait for ALL agents to complete their work"
echo "4. Run: $WORK_DIR/collect-results.sh"
echo
echo -e "${YELLOW}=== Manual Launch Instructions ===${NC}"
echo "To launch subagents manually, use the Task tool with:"
echo
for i in $(seq 1 $ACTUAL_AGENTS); do
    TASK_FILE="$WORK_DIR/batches/agent-$i/task.md"
    if [ -f "$TASK_FILE" ]; then
        echo "Agent $i:"
        echo "  Step 1: Read task file with: cat $TASK_FILE"
        echo "  Step 2: Copy the ENTIRE output from cat command"
        echo "  Step 3: Launch agent with Task tool:"
        echo "    - description: 'Fix ESLint errors - Batch $i'"
        echo "    - subagent_type: 'general-purpose'"
        echo "    - prompt: [PASTE THE ENTIRE CONTENT FROM STEP 1]"
        echo
    fi
done

echo -e "${YELLOW}CRITICAL INSTRUCTIONS:${NC}"
echo "1. YOU must run the 'cat' command for each task file"
echo "2. YOU must copy the entire content that 'cat' displays"
echo "3. YOU must paste that content as the 'prompt' parameter"
echo "4. Do NOT tell agents to read files - they cannot access your /tmp/"
echo "5. Agents only receive what you put in the 'prompt' parameter"

# No need for this warning anymore since we removed the limit